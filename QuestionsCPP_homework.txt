Questions on C++ #1

Answer in both Bulgarian and English

Point out your resources - slides, books, documentation, online resources, etc. with links.
Add links after the answer you used the resource/s for.

NO CHAT BOTS ALLOWED! NO GOOGLE TRANSLATE! EXPLAIN IN YOUR WORDS



1.Syntax Explanation:
	Describe what the following line of C++ code does: int* ptr = &var;

This line code declares a pointer named ptr that stores the memory address of the variable var.

Този ред от код декларира указател с име ptr, който съдържа адреса в паметта на променливата var.




2.Concept Clarification:
	Explain the difference between a while loop and a do-while loop in C++.

- While цикълът първо проверява условието след това извършва блока от код докато 
do-while ще изпълни условието поне веднъж след това ще провери условието(блока от код).

-While loop will first check the condition and after that it will execute the block of code 
where do-while will execute the block of code atleast once before checking the condition.




3.Code Analysis:
	Given a snippet of C++ code containing a for loop, explain what the loop does, including how many times it iterates and why.

for(int i = 0; i < 5; i++){
     cout << i << endl;
}

For цикълът започва от индекс 0. Условието е ,че докато i което е 0 е по-малко от 5 , i да се инкрементира с 1.
След което да се изпринти променливата i.
Този цикъл ще се повтаря докато i не стане = 5 и условието върне false.

The given for loop starts with index 0. The condition is that while i which is 0 is less than 5,
i increments by 1 and executes the block of code.
This loop will repeat until the variable i is equal to 5 and the condition returns false.




4.Function Usage:
	Write about how functions prevent code duplication and give an 
example of a simple C++ function that calculates the square of a number.

Фунцкиите съдържат блок от код който може да се използва многократно.

Functions contain block of code which could be used as many times as you need it and it prevents duplication.

EXAMPLE:
int calculateSquare(int n) {
    return n * n;
}




5.Memory Management:
	Discuss the importance of memory management in C++ and explain the difference between stack and heap memory allocation.

Memory management in C++ is essential to ensure that applications are efficient and do not waste resources

Stack and heap are two areas which we have in our RAM which we use to store data. Stack has high-speed access while Heap has slower. 
In a stack, the allocation and de-allocation are automatically done by the compiler whereas, in heap, it needs to be done by the programmer manually

Stack и Heap са две области в нашата оперативна памет, които използваме за съхранение на данни. 
Stack предлага бърз достъп, докато heap е по-бавен.
В стека, разпределението и освобождаването на памет се извършват автоматично от компилатора, докато в хийпа това трябва да се извърши ръчно от програмиста.

- -https://www.geeksforgeeks.org/stack-vs-heap-memory-allocation/




6.Object-Oriented Programming:
	Explain the concept of encapsulation in C++ and how it is achieved using classes.

Инкапсулацията е поставянето на данните и функциите в контейнер (клас). Това помага да се запазят важните неща в безопасност.
Можете да решите какво другите могат да видят (public) и какво е скрито (private).

Encapsulation is placing data and functions in a container. It helps protect important things.
You can decide what others can see and what is hidden.




7.Error Handling:
	Describe how exceptions are used in C++ for error handling, with an example of a try-catch block.

The try statement allows you to define a block of code to be tested for errors while it is being executed. 
The throw keyword throws an exception when a problem is detected, which lets us create a custom error. 

try операторът ви позволява да дефинирате блок от код, който да бъде тестван за грешки по време на изпълнение.
Ключовата дума throw генерира изключение, когато се открие проблем, което ни позволява да създадем персонализирана грешка.

try {
  int age = 15;
  if (age >= 18) {
    cout << "Access granted - you are old enough.";
  } else {
    throw (age);
  }
}
catch (int myNum) {
  cout << "Access denied - You must be at least 18 years old.\n";
  cout << "Age is: " << myNum;
}

- https://www.w3schools.com/cpp/cpp_exceptions.asp




8.STL Containers:
	Write about the purpose and use of the std::vector container in C++.

vector е динамичен списък, който може да се увеличава или намалява. Ползва се за управление на 
групиране с лесни начини за добавяне, премахване или достъп до елементи.

vector is a dynamic list that can grow or shrink. It is useful for managing collections 
of items with easy ways to add, remove, or access elements.




9.Pointers and References:
	Discuss the difference between pointers and references in C++ and provide scenarios where one might be preferred over the other.

pointers act like flexible arrows, pointing to different parts of memory. They offer reassignability,
allowing you to change what they point to. On the other hand, references are like nicknames for variables,
offering simplicity but with the limitation that once set, they can't be changed.
Choose pointers for dynamic scenarios and flexibility, and references for straightforwardness and safety.


Указателите са като стрелки, които сочат към различни части от паметта. Те предоставят възможност за пренасочване,
позволявайки ви да променяте към какво сочат. Референциите са като допълнителни имена за променливи, които улесняват
работата с тях, без възможността да бъдат променяни след установяване. Те предоставят удобен начин за достъп
и манипулиране на данни в програмата. Изберете указатели за динамични сценарии и гъвкавост, а референции за простота и безопасност.

- https://www3.ntu.edu.sg/HOME/EHCHUA/PROGRAMMING/cpp/cp_PointerReference.html




10.Advanced Features:
	Explain the concept of templates in C++ and how they support generic programming. Include a simple example of a template function.

Templates enable creation of functions or classes that work with different data types while maintaining type safety.
For example, a template function like findMax can find the maximum of two values regardless of their data type.

Шаблоните позволяват създаването на функции или класове, които работят с различни типове данни, като запазват
безопасността по отношение на типовете. Например, шаблонна функция като findMax може да намира максимума на две стойности,
независимо от техния тип данни.

template <typename T>
T findMax(T a, T b) {
    return (a > b) ? a : b;
}

- https://medium.com/@abdulhaq.ah/what-are-templates-in-c-and-how-they-work-explian-with-examples-ab28ce166cf0
